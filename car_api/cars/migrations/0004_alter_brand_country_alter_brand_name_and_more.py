# Generated by Django 5.1.1 on 2024-10-07 10:30

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("cars", "0003_rename_name_model_car_model_name_alter_brand_country"),
    ]

    operations = [
        migrations.AlterField(
            model_name="brand",
            name="country",
            field=models.CharField(
                max_length=100,
                validators=[
                    django.core.validators.RegexValidator(
                        code="invalid_country_name",
                        message="Country name should start with capital letter and contain only letters",
                        regex="^[a-zA-Z\\s]+$",
                    )
                ],
                verbose_name="Country",
            ),
        ),
        migrations.AlterField(
            model_name="brand",
            name="name",
            field=models.CharField(
                max_length=100,
                validators=[
                    django.core.validators.RegexValidator(
                        code="invalid_brand_name",
                        message="Brand name should start with capital letter and contain only letters",
                        regex="^[a-zA-Z\\s]+$",
                    )
                ],
                verbose_name="Brand Name",
            ),
        ),
        migrations.AlterField(
            model_name="car",
            name="engine",
            field=models.CharField(
                max_length=50,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Engine size must be in format like 2.0L, 1.4L, etc.",
                        regex="^\\d+(\\.\\d+)?L$",
                    )
                ],
                verbose_name="Engine",
            ),
        ),
        migrations.AlterField(
            model_name="car",
            name="exterior_color",
            field=models.CharField(
                max_length=50,
                validators=[
                    django.core.validators.RegexValidator(
                        code="invalid_color_name",
                        message="Color name should start with a capital letter and contain only letters",
                        regex="^[a-zA-Z\\s]+$",
                    )
                ],
                verbose_name="Exterior Color",
            ),
        ),
        migrations.AlterField(
            model_name="car",
            name="fuel_type",
            field=models.CharField(
                max_length=50,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Fuel type should be either Gasoline, Diesel or Electric",
                        regex="^(Gasoline|Diesel|Electric)$",
                    )
                ],
                verbose_name="Fuel Type",
            ),
        ),
        migrations.AlterField(
            model_name="car",
            name="interior_color",
            field=models.CharField(
                max_length=50,
                validators=[
                    django.core.validators.RegexValidator(
                        code="invalid_color_name",
                        message="Color name should start with a capital letter and contain only letters",
                        regex="^[a-zA-Z\\s]+$",
                    )
                ],
                verbose_name="Interior Color",
            ),
        ),
        migrations.AlterField(
            model_name="car",
            name="is_on_sale",
            field=models.BooleanField(default=False, verbose_name="Is on Sale"),
        ),
        migrations.AlterField(
            model_name="car",
            name="mileage",
            field=models.PositiveBigIntegerField(
                validators=[
                    django.core.validators.MinValueValidator(
                        0, "Mileage should be greater than or equal to 0"
                    )
                ],
                verbose_name="Mileage",
            ),
        ),
        migrations.AlterField(
            model_name="car",
            name="price",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=10,
                validators=[
                    django.core.validators.MinValueValidator(
                        0, "Price should be greater than 0"
                    )
                ],
                verbose_name="Price",
            ),
        ),
        migrations.AlterField(
            model_name="car",
            name="transmission",
            field=models.CharField(
                max_length=50,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Transmission should be either Automatic or Manual",
                        regex="^(Automatic|Manual)$",
                    )
                ],
                verbose_name="Transmission",
            ),
        ),
        migrations.AlterField(
            model_name="model_car",
            name="model_name",
            field=models.CharField(
                max_length=100,
                validators=[
                    django.core.validators.RegexValidator(
                        code="invalid_model_name",
                        message="Model name should start with a capital letter and contain only letters and numbers.",
                        regex="^[a-zA-Z0-9\\s\\-]+$",
                    )
                ],
                verbose_name="Model Name",
            ),
        ),
        migrations.AlterField(
            model_name="model_car",
            name="year",
            field=models.IntegerField(
                validators=[
                    django.core.validators.MinValueValidator(
                        1886, "Cars weren't manufactured before 1886."
                    ),
                    django.core.validators.MaxValueValidator(
                        2024, "Future cars aren't allowed yet."
                    ),
                ],
                verbose_name="Year of Issue",
            ),
        ),
    ]
